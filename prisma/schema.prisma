// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users{
  id Int @id @default(autoincrement())
  fullname String
  email String @unique
  role Role @default(USER)
  password String?
  createdAt DateTime @default(now())
  updateAt DateTime? @updatedAt
  googleId String? @unique
  isActive Boolean @default(true)
  telegramChatId String?

 
  cv Cv[]
  job Job[]
  likedJob LikedJob[]

}

model Job{ 
  id Int @id @default(autoincrement())
  title String
  categoryId Int
  country String
  salary Float
  minAge Int
  maxAge Int
  duration Int
  startWork DateTime
  description String
  phone String?
  telegram String?
  logotip String?
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  userId Int
  status Boolean @default(false)


   users Users @relation(fields: [userId],references: [id],onDelete: Cascade)
   category Category @relation(fields: [categoryId],references: [id],onDelete: Cascade)

   likedJob LikedJob[]

}

model Category{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  translation CategoryTranslate[]
  job Job[]
}

model CategoryTranslate{
  id Int @id @default(autoincrement())
  language String
  categoryId Int
  name String

  category Category @relation(fields: [categoryId],references: [id],onDelete: Cascade)

  @@unique([categoryId,language])

}



enum Role{
  ADMIN
  SUPERADMIN
  USER
  EMPLOYER
}

model Cv{
  id Int @id @default(autoincrement())
  fullName String
  email String 
  phone String
  birthday DateTime
  locatioin String
  descriptioin String
  userId Int

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  users Users @relation(fields: [userId],references: [id],onDelete: Cascade)

  experience Experience[]
  education Education[]
  languages Languages[]
  skills Skills[]

}
model Skills{
  id Int @id @default(autoincrement())
  name String
  cvId Int

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  cv Cv @relation(fields: [cvId],references: [id],onDelete: Cascade)


}

model Experience{
  id Int @id @default(autoincrement())
  companyName String
  position String
  startWork DateTime
  endWork DateTime
  description String
  cvId Int

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  cv Cv @relation(fields: [cvId],references: [id],onDelete: Cascade)
}

model Education{
  id Int @id @default(autoincrement())
  educationName String
  level String
  specialty String
  startEducation DateTime
  endEducation DateTime
  cvId Int

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt


  cv Cv @relation(fields: [cvId],references: [id],onDelete: Cascade)

}

model Languages{
  id Int @id @default(autoincrement())
  lang String
  level String

  cvId Int
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt


  cv Cv @relation(fields: [cvId],references: [id],onDelete: Cascade)
}

model LikedJob{
  id Int @id @default(autoincrement())
  userId Int
  jobId Int

  users Users @relation(fields: [userId],references: [id],onDelete: Cascade)
  job Job @relation(fields: [jobId],references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
}